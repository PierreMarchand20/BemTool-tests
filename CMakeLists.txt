#=============================================================================#
#============================== Project ======================================#
#=============================================================================#
cmake_minimum_required(VERSION 3.0)
Project(BemTool-tests)

# To force c++11
if (${CMAKE_VERSION} VERSION_LESS 3.1)
	add_compile_options(-std=c++11)
elseif (${CMAKE_VERSION} VERSION_LESS 3.6.3 AND ${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")
	add_compile_options(-std=c++11)
else()
	set(CMAKE_CXX_STANDARD 11)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif ()

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to 'Release' as none was specified.")
  set(CMAKE_BUILD_TYPE Release)
endif()

# Files to do find_package for some module
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake-modules")

# Options
option(BEMTOOL_WITH_GUI      "Build bemtool visualization tools ?" OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
#=============================================================================#
#========================== External Libraries ===============================#
#=============================================================================#
#Bemtool
find_package(BemTool REQUIRED)
list(APPEND BEMTOOL_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/include")

# Boost package - special functions
find_package(Boost REQUIRED)

# Htool
find_package(Htool REQUIRED)

# SUITESPARSE
find_package(SuiteSparse)
# find_package(MUMPS)

# HPDDM
find_package(HPDDM)

# MPI
find_package (MPI REQUIRED)
message("-- MPI libraries found in " "${MPI_LIBRARIES}")
message("-- MPI include files found in " "${MPI_INCLUDE_PATH}")

# OPENMP
find_package(OpenMP)
if (OpenMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
    message("-- OpenMP flags are " "${OpenMP_CXX_FLAGS}" )
    message("-- OpenMP linker flags are " "${OpenMP_EXE_LINKER_FLAGS}" )
else()
    message("-- OpenMP not found")
endif()

# BLAS
find_package(BLAS REQUIRED)
message("-- Found Blas implementation:" "${BLAS_LIBRARIES}")

# LAPACK
find_package(LAPACK)
message("-- Found Lapack:" "${LAPACK_LIBRARIES}")

 # Elemental
find_package(Elemental HINTS ${Elemental_ROOT_DIR})
message("-- Found Elemental:" "${Elemental_INCLUDE_DIRS}")

#=============================================================================#
#=========================== Libraries =======================================#
#=============================================================================#

if (BEMTOOL_WITH_GUI)
	#=== Nanogui and dependencies
	message("-- Nanogui and its dependencies will be built as submodules")
	execute_process(COMMAND git submodule update --init --recursive external/nanogui
	                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})


	# Configuration options for nanogui
	set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
	set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
	set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

	# Add the configurations from nanogui
	add_subdirectory(external/nanogui)

	# For reliability of parallel build, make the NanoGUI targets dependencies
	set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

	# Various preprocessor definitions have been generated by NanoGUI
	add_definitions(${NANOGUI_EXTRA_DEFS})

	# On top of adding the path to nanogui/include, you may need extras
	include_directories(${NANOGUI_EXTRA_INCS})

	set(NANOGUI_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/external/nanogui/include" )



	# Create an interface library
	add_library(bemtool_visu INTERFACE)
	target_include_directories(bemtool_visu INTERFACE ${NANOGUI_EXTRA_INCS} ${NANOGUI_INCLUDE_DIR} ${GLM_INCLUDE_DIRS})
	target_link_libraries(bemtool_visu INTERFACE
						nanogui
						${NANOGUI_EXTRA_LIBS})

endif()



add_library(bemtool INTERFACE)
target_include_directories(bemtool INTERFACE
					${BEMTOOL_INCLUDE_DIR}
					${Boost_INCLUDE_DIRS}
					${HTOOL_INCLUDE_DIR}
					${MPI_INCLUDE_PATH}
					${HPDDM_INCLUDE_DIR}
                    ${Elemental_INCLUDE_DIRS}
                    )

target_link_libraries(bemtool INTERFACE
					${MPI_LIBRARIES}
					${BLAS_LIBRARIES}
                    ${LAPACK_LIBRARIES}
                    # ${SUITESPARSE_LIBRARIES}
                    ${Elemental_LIBRARIES}
                    )

# For headers to show in IDE
if (NOT "${CMAKE_VERSION}" VERSION_LESS 3.1)
	target_sources(bemtool INTERFACE ${BEMTOOL_INCLUDE_DIR})
endif()

#=============================================================================#
#========================== Repertories ======================================#
#=============================================================================#
add_subdirectory(examples EXCLUDE_FROM_ALL)

enable_testing()
add_custom_target(build-tests-functional)
add_custom_target(build-tests-functional-operators)
add_custom_target(build-tests-functional-potentials)
add_subdirectory(tests EXCLUDE_FROM_ALL)
